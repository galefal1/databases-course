# Just strings
DROP TABLE IF EXISTS imdb_ijs.tmp_movies;

CREATE TABLE imdb_ijs.tmp_movies (
  `id` varchar(100),
  `name` varchar(100),
  `year` varchar(100),
  `rank` varchar(100)
);

# Table allows "semantic" date reference
insert into imdb_ijs.tmp_movies values(1, 'Superman', 'BaShana Habaa', 10);


# Choose proper data types
DROP TABLE IF EXISTS imdb_ijs.tmp_movies;

CREATE TABLE imdb_ijs.tmp_movies (
  `id` int,
  `name` varchar(100),
  `year` int,
  `rank` float
);

insert into imdb_ijs.tmp_movies values(1, 'Superman', 'BaShana Habaa', 10); # Fails now
insert into imdb_ijs.tmp_movies values(Null, 'Superman', 2000, 10); # Yet can add a movie without id, forbidding key usage


# Null constraint
DROP TABLE IF EXISTS imdb_ijs.tmp_movies;

CREATE TABLE imdb_ijs.tmp_movies (
  `id` int NOT NULL,
  `name` varchar(100) NOT NULL,
  `year` int,
  `rank` float
);

insert into imdb_ijs.tmp_movies values(Null, 'Superman', 2000, 10); # Fails now
insert into imdb_ijs.tmp_movies values(1, 'Superman', -300, 10); # We can add very old movies


# Year constraint
DROP TABLE IF EXISTS imdb_ijs.tmp_movies;

CREATE TABLE imdb_ijs.tmp_movies (
  `id` int NOT NULL,
  `name` varchar(100) NOT NULL,
  `year` int,
  `rank` float,
  CHECK (year>=1900)
);

insert into imdb_ijs.tmp_movies values(1, 'Superman', -300, 10); # Fails now



# Rank null as default
DROP TABLE IF EXISTS imdb_ijs.tmp_movies;

CREATE TABLE imdb_ijs.tmp_movies (
  `id` int NOT NULL,
  `name` varchar(100) NOT NULL,
  `year` int,
  `rank` float DEFAULT NULL,
  CHECK (year>=1900)
);

insert into imdb_ijs.tmp_movies(id, name, year) values(1, 'Superman', 2000); # If rank is not provided, default will be used
insert into imdb_ijs.tmp_movies(id, name, year) values(1, 'Superman', 2000); # But you can add it twice and more


# Primary key
DROP TABLE IF EXISTS imdb_ijs.tmp_movies;

CREATE TABLE imdb_ijs.tmp_movies (
  `id` int NOT NULL,
  `name` varchar(100) NOT NULL,
  `year` int,
  `rank` float DEFAULT NULL,
  CHECK (year>=1900),
  PRIMARY KEY (`id`)
);

insert into imdb_ijs.tmp_movies(id, name, year) values(1, 'Superman', 2000); # Added
insert into imdb_ijs.tmp_movies(id, name, year) values(1, 'Superman', 2000); # Fails



# Key on name
DROP TABLE IF EXISTS imdb_ijs.tmp_movies;

CREATE TABLE imdb_ijs.tmp_movies (
  `id` int NOT NULL,
  `name` varchar(100) NOT NULL,
  `year` int,
  `rank` float DEFAULT NULL,
  CHECK (year>=1900),
  PRIMARY KEY (`id`),
  KEY `movies_name` (`name`) # Faster search
);


# IJS structure - notice difference from our examples
DROP TABLE IF EXISTS imdb_ijs.tmp_movies;

CREATE TABLE imdb_ijs.tmp_movies (
  `id` int(11) NOT NULL DEFAULT 0,
  `name` varchar(100) DEFAULT NULL,
  `year` int(11) DEFAULT NULL,
  `rank` float DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `movies_name` (`name`)
);



# Director column
DROP TABLE IF EXISTS imdb_ijs.tmp_movies;

CREATE TABLE imdb_ijs.tmp_movies (
  `id` int NOT NULL,
  `name` varchar(100) NOT NULL,
  `year` int,
  `rank` float DEFAULT NULL,
  `director` int,
  CHECK (year>=1900),
  PRIMARY KEY (`id`),
  KEY `movies_index` (`name`)
);

insert into imdb_ijs.tmp_movies values(1, 'Superman', 2000, null, -100); # There is no director with id -100


# Director foreign key
DROP TABLE IF EXISTS imdb_ijs.tmp_movies;

CREATE TABLE imdb_ijs.tmp_movies (
  `id` int NOT NULL,
  `name` varchar(100) NOT NULL,
  `year` int,
  `rank` float DEFAULT NULL,
  `director` int,
  CHECK (year>=1900),
  PRIMARY KEY (`id`),
  KEY `movies_index` (`name`),
  FOREIGN KEY (director) REFERENCES directors(id)
);

insert into imdb_ijs.tmp_movies values(1, 'Superman', 2000, null, -100); # Fails now


# Multiple directors
# losing foreign key and type, data extraction is messy
DROP TABLE IF EXISTS imdb_ijs.tmp_movies;

CREATE TABLE imdb_ijs.tmp_movies (
  `id` int NOT NULL,
  `name` varchar(100) NOT NULL,
  `year` int,
  `rank` float DEFAULT NULL,
  `directors` varchar(100),
  CHECK (year>=1900),
  PRIMARY KEY (`id`),
  KEY `movies_index` (`name`)
);

insert into imdb_ijs.tmp_movies values(1, 'Superman', 2000, null, "1"); 
insert into imdb_ijs.tmp_movies values(2, 'Superman', 2000, null, "1, 2"); 
insert into imdb_ijs.tmp_movies values(3, 'Superman', 2000, null, "11, 2"); 



# Representing multiple directors per movie

DROP TABLE IF EXISTS imdb_ijs.tmp_movies_directors;
CREATE TABLE imdb_ijs.tmp_movies_directors (
  `director_id` int NOT NULL,
  `movie_id` int NOT NULL,
  PRIMARY KEY (`director_id`,`movie_id`),
  KEY `movies_directors_director_id` (`director_id`),
  KEY `movies_directors_movie_id` (`movie_id`),
  CONSTRAINT `movies_directors_ibfk_1` FOREIGN KEY (`director_id`) REFERENCES `directors` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `movies_directors_ibfk_2` FOREIGN KEY (`movie_id`) REFERENCES `movies` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
);


# Clean up
DROP TABLE IF EXISTS imdb_ijs.tmp_movies;
DROP TABLE IF EXISTS imdb_ijs.tmp_movies_directors;


